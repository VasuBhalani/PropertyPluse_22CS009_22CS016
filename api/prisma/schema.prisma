// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId 
  email     String   @unique                      // Unique constraint on the email field
  username  String                                
  password  String
  avtar     String?                               // Optional field
  createdAt DateTime @default(now())              // Default to the current timestamp
  posts     Post[]                                // One-to-many relation with the Post model
  savedPost SavedPost[] // One-to-many relation with the SavedPost
  chats Chat[] @relation(fields: [chatId], references: [id])
  chatId String[] @db.ObjectId

}



model Post {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId 
  title       String                                
  price       Float
  images      String[]                               
  address     String                             
  city        String                           
  bedroom     Int                             
  bathroom    Int                             
  latitude    String
  longitude   String
  type        Type         // Enum type: buy or rent
  property    Property     // Enum type: apartment, house, condo, land
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId 
  postDetail PostDetail?
  savedPost SavedPost[] 
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId 
  desc        String
  utilities   String
  pet         String
  income      String
  size        Int
  school      Int
  bus         Int
  restaurant  Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @db.ObjectId @unique
}


model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Chat{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId
  createdAt DateTime @default(now())
  seenBy String[] @db.ObjectId
  message Message[]
  lastmessage String?
}

model Message{
  
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  userId String // sender's id
  chat Chat @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId
  createdAt DateTime @default(now())
}  